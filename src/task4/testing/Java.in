@header {
package task4.testproduction;
}

@members {
    int varCount = 0;
}

compilationUnit
    :   packageDeclaration typeDeclaration EOF
    ;

packageDeclaration
    :   PACKAGE qualifiedName SEMICOLON
    ;

importDeclaration
    :   IMPORT qualifiedName importAll SEMICOLON
    ;

importAll
    :   DOT MUL | ;

qualifiedName
    :   identifier DOT qualifiedName | identifier
    ;

typeDeclaration
    :   classOrInterfaceModifier classDeclaration
    |   SEMICOLON
    ;

classOrInterfaceModifier
    :   public protected private static abstract final;

public: PUBLIC | ;
protected: PROTECTED | ;
private: PRIVATE | ;
static: STATIC | ;
abstract: ABSTRACT | ;
final: FINAL | ;

classDeclaration
    :   CLASS identifier extendsT classBody
    ;

extendsT: EXTENDS type | ;
implementsT: IMPLEMENTS typeList | ;

classBody
    :   LBRACE classBodyDeclaration RBRACE
    ;

classBodyDeclaration
    :   SEMICOLON
    |   static block
    |   classOrInterfaceModifier memberDeclaration ;

classBodyDeclarations: classBodyDeclaration classBodyDeclarations | ;

typeList
    :   type | COMMA typeList
    ;

type
    :   classOrInterfaceType arrayT
    |   primitiveType arrayT
    ;

arrayT
    :   LBRACK RBRACK arrayT | ;

classOrInterfaceType
    :   identifier DOT classOrInterfaceType | identifier
    ;

primitiveType
    :   BOOLEAN | CHAR | BYTE | SHORT | INT | LONG | FLOAT | DOUBLE
    ;

block
    :   LBRACE blockStatements RBRACE
    ;

blockStatement
    :   localVariableDeclarationStatement
    |   statement
    |   typeDeclaration
    ;

blockStatements
    :   blockStatement blockStatements | ;

localVariableDeclarationStatement
    :    localVariableDeclaration SEMICOLON
    ;

localVariableDeclaration
    :   classOrInterfaceModifier type variableDeclarators
    ;

variableDeclarators
    :   variableDeclarator COMMA variableDeclarators | variableDeclarator
    ;

variableDeclarator
    :   variableDeclaratorId initT
    ;

initT:  ASSIGN variableInitializer | ;

variableDeclaratorId
    :   identifier arrayT
    {
        varCount++;
    }
    ;

variableInitializer : expression;

statement
    :   block
    |   IF parExpression statement elseT
    |   FOR LPAREN forControl RPAREN statement
    |   RETURN expressionT SEMICOLON
    |   THROW expression SEMICOLON
    |   BREAK identifier SEMICOLON
    |   SEMICOLON
    |   statementExpression SEMICOLON
    |   identifier COLON statement
    ;

elseT : statement | ;

forControl
    :   forInit SEMICOLON expressionT SEMICOLON forUpdate
    ;

forInit
    :   localVariableDeclaration
    |   expressionList
    |   
    ;

forUpdate
    :   expressionList
    |   
    ;

parExpression
    :   LPAREN expression RPAREN
    ;

expressionList
    :   expression COMMA expressionList | 
    ;

expressionT
    :   expression | ;

statementExpression
    :   expression
    ;

expression
    :   primary
    |   expression DOT identifier
    |   expression LBRACK expression RBRACK
    |   expression LPAREN expressionList RPAREN
    |   NEW creator
    |   LPAREN type RPAREN expression
    |   expression INC
    |   expression DEC
    |   mathop expression
    |   boolop expression
    |   expression division expression
    |   expression INSTANCEOF type
    |   expression comp expression
    |   expression BITAND expression
    |   expression CARET expression
    |   expression BITOR expression
    |   expression AND expression
    |   expression OR expression
    |   expression QUESTION expression COLON expression
    ;

mathop: ADD | SUB | INC | DEC | ADD | SUB;
division: MUL | DIV | MOD;
boolop: TILDE | BANG;
comp: LT LT | GT GT GT | GT GT | LE | GE | GT | LT | EQUAL | NOTEQUAL;

creator
    :   createdName classCreatorRest
    ;

createdName
    :   identifier
    |   primitiveType
    ;

classCreatorRest
    :   arguments classBodyT
    ;

classBodyT: classBody | ;

primary
    :   LPAREN expression RPAREN
    |   THIS
    |   SUPER
    |   literal
    |   identifier
    ;

superSuffix
    :   arguments
    |   DOT identifier arguments
    ;

arguments
    :   LPAREN expressionList RPAREN | 
    ;

literal
    :   integerLiteral
    |   floatingPointLiteral
    |   characterLiteral
    |   stringLiteral
    |   booleanLiteral
    |   NULL
    ;

memberDeclaration
    |   type identifier typeWtfDeclaration
    |   identifier formalParameters methodOrConstructorTrail
    |   classDeclaration
    ;

typeWtfDeclaration: formalParameters arrayT throwsT methodBodyT
    | fieldDeclaration;

fieldDeclaration
    :   variableDeclarators SEMICOLON
    ;

typeOrVoid: type | VOID;

constructorDeclaration
    :   identifier formalParameters  constructorBody
    ;

methodOrConstructorTrail: constructorBody | arrayT throwsT methodBodyT;

throwsT: THROWS qualifiedNameList | ;

constructorBody
    :   block
    ;

methodBodyT: methodBody | SEMICOLON;

qualifiedNameList
    :   qualifiedName qualifiedNames
    ;

qualifiedNames: COMMA qualifiedName qualifiedNames | ;

formalParameters
    :   LPAREN formalParameterList RPAREN
    ;

formalParameterList
    :   formalParameter formalParametersT lastFormalParameterT
    |   lastFormalParameter | 
    ;

formalParametersT:
    COMMA formalParameter formalParametersT | ;

lastFormalParameterT:
    COMMA lastFormalParameter | ;

formalParameter
    :   modifiers type variableDeclaratorId
    ;

modifiers : classOrInterfaceModifier modifiers | ;

lastFormalParameter
    :   modifiers type ELLIPSIS variableDeclaratorId
    ;

methodBody
    :   block
    ;

ABSTRACT      : 'abstract';
ASSERT        : 'assert';
BOOLEAN       : 'boolean';
BREAK         : 'break';
BYTE          : 'byte';
CASE          : 'case';
CATCH         : 'catch';
CHAR          : 'char';
CLASS         : 'class';
CONST         : 'const';
CONTINUE      : 'continue';
DEFAULT       : 'default';
DO            : 'do';
DOUBLE        : 'double';
ELSE          : 'else';
ENUM          : 'enum';
EXTENDS       : 'extends';
FINAL         : 'final';
FINALLY       : 'finally';
FLOAT         : 'float';
FOR           : 'for';
IF            : 'if';
GOTO          : 'goto';
IMPLEMENTS    : 'implements';
IMPORT        : 'import';
INSTANCEOF    : 'instanceof';
INT           : 'int';
INTERFACE     : 'interface';
LONG          : 'long';
NATIVE        : 'native';
NEW           : 'new';
PACKAGE       : 'package';
PRIVATE       : 'private';
PROTECTED     : 'protected';
PUBLIC        : 'public';
RETURN        : 'return';
SHORT         : 'short';
STATIC        : 'static';
STRICTFP      : 'strictfp';
SUPER         : 'super';
SWITCH        : 'switch';
SYNCHRONIZED  : 'synchronized';
THIS          : 'this';
THROW         : 'throw';
THROWS        : 'throws';
TRANSIENT     : 'transient';
TRY           : 'try';
VOID          : 'void';
VOLATILE      : 'volatile';
WHILE         : 'while';

LPAREN          : '(';
RPAREN          : ')';
LBRACE          : '{';
RBRACE          : '}';
LBRACK          : '[';
RBRACK          : ']';
SEMI            : ';';
COMMA           : ',';
DOT             : '.';
SEMICOLON       : ';';

ASSIGN          : '=';
GT              : '>';
LT              : '<';
BANG            : '!';
TILDE           : '~';
QUESTION        : '?';
COLON           : ':';
EQUAL           : '==';
LE              : '<=';
GE              : '>=';
NOTEQUAL        : '!=';
AND             : '&&';
OR              : '||';
INC             : '++';
DEC             : '--';
ADD             : '+';
SUB             : '-';
MUL             : '*';
DIV             : '/';
BITAND          : '&';
BITOR           : '|';
CARET           : '^';
MOD             : '%';

ADD_ASSIGN      : '+=';
SUB_ASSIGN      : '-=';
MUL_ASSIGN      : '*=';
DIV_ASSIGN      : '/=';
AND_ASSIGN      : '&=';
OR_ASSIGN       : '|=';
XOR_ASSIGN      : '^=';
MOD_ASSIGN      : '%=';

ZERO : '0';
DIGIT :  '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9';
NONZERODIGIT :  '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9';
integerLiteral
    :   ZERO | NONZERODIGIT digits
    ;

digits:
    DIGIT digits | ;
    
oneOrMoreDigits:
    DIGIT digits;

floatingPointLiteral
    :   digits DOT oneOrMoreDigits floatingLetter
    ;

floatingLetter: FLOATD | FLOATF | ;

FLOATD: 'd';
FLOATF: 'f';

booleanLiteral
    :   TRUE
    |   FALSE
    ;

TRUE: 'true';
FALSE:'false';

SINGLEQUOTE: '\'';
DOUBLEQUOTE: '\"'
characterLiteral: SINGLEQUOTE anyIdSymbol SINGLEQUOTE;
stringLiteral: DOUBLEQUOTE anyIdSymbols DOUBLEQUOTE;

identifier
    :   nonDigitIdSymbols anyIdSymbols
    ;

NONDIGITIDSYMBOL:  'a' | 'b' | 'c' | 'd' | 'e' | 'f' |
                  'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' |
                  'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' |
                  'u' | 'v' | 'w' | 'x' | 'y' | 'z' |
                  'A' | 'B' | 'C' | 'D' | 'E' | 'F' |
                  'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' |
                  'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' |
                  'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | '$' | '_';
anyIdSymbol: DIGIT | NONDIGITIDSYMBOL;
anyIdSymbols: anyIdSymbol anyIdSymbols | ;
nonDigitIdSymbols: NONDIGITIDSYMBOL nonDigitIdSymbols | NONDIGITIDSYMBOL;

NULL: 'null';

AT : '@';
ELLIPSIS : '...';