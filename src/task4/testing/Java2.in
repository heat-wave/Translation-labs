@header {
package task4.testproduction;
}

@members {
    int varCount = 0;
}

compilationUnit -> String
    :   packageDeclaration modifiers typeDeclaration
        {return packageDeclaration.get(0) + " " + modifiers.get(0) + " " + typeDeclaration.get(0);}
    ;

packageDeclaration -> String
    :   PACKAGE qualifiedName SEMICOLON {return "package " + qualifiedName.get(0) + " ;" ;}
    ;

importDeclaration -> String
    :   IMPORT qualifiedName importAll SEMICOLON
        {return "import " + qualifiedName.get(0) + importAll.get(0) + ";";}
    ;

SPACE : ' ' | '\n' | '\t';

importAll -> String
    :   DOT MUL {return ".*";} | {return "";};

qualifiedName -> String
    :   identifier qualifiedNameTrail {return identifier.get(0) + qualifiedNameTrail.get(0);};

qualifiedNameTrail -> String
    :   DOT qualifiedName qualifiedNameTrail {return "." + qualifiedName.get(0) + qualifiedNameTrail.get(0);}
    |   {return "";};

modifiers -> String
    :   publicT publicTrail {return publicT.get(0) + publicTrail.get(0);}
    |   {return "";};

publicT -> String
    : PUBLIC {return "public ";}
    | PROTECTED {return "protected ";}
    | PRIVATE {return "private ";}
    | {return "";};

publicTrail -> String
    : STATIC staticTrail {return "static " + staticTrail.get(0);}
    | staticTrail {return staticTrail.get(0);};

staticTrail -> String
    : ABSTRACT abstractTrail {return "abstract " + abstractTrail.get(0);}
    | abstractTrail {return abstractTrail.get(0);};

abstractTrail -> String
    : FINAL {return "final ";}
    | {return "";};

classDeclaration -> String
    :   CLASS identifier extendsT {return "class " + identifier.get(0) + " " + extendsT.get(0);};

extendsT -> String
    :   EXTENDS type extendsTrail {return "extends " + type.get(0) + " " + extendsTrail.get(0);}
    |   extendsTrail {return extendsTrail.get(0);};

extendsTrail -> String
    :   IMPLEMENTS typeList classBody {return "implements " + typeList.get(0) + " " + classBody.get(0);}
    |   classBody {return classBody.get(0);};

type -> String
    :   primitiveType arraysT {return primitiveType.get(0) + arraysT.get(0);}
    |   nonPrimitiveType arraysT {return nonPrimitiveType.get(0) + arraysT.get(0);};

arraysT -> String
    :   LBRACK RBRACK arraysT {return "[]" + arraysT.get(0);}
    |   {return "";};

typeList -> String
    :   type {return type.get(0);}
    |   COMMA typeList {return COMMA.get(0) + typeList.get(0);};

nonPrimitiveType -> String
    :   identifier identifiersRec {return identifier.get(0) + identifiersRec.get(0);};

primitiveType -> String
    :   BOOLEAN {return BOOLEAN.get(0); }
        | CHAR {return CHAR.get(0); }
        | BYTE {return BYTE.get(0); }
        | SHORT {return SHORT.get(0); }
        | INT {return INT.get(0); }
        | LONG {return LONG.get(0); }
        | FLOAT {return FLOAT.get(0); }
        | DOUBLE {return DOUBLE.get(0); };

identifiersRec -> String
    :   identifier identifiersRec {return identifier.get(0) + identifiersRec.get(0);}
    |   {return "";};

classBody -> String
    :   LBRACE classBodyDeclaration RBRACE {return "{" + classBodyDeclaration.get(0) + "}";}
    ;

classBodyDeclaration -> String
    :   SEMICOLON classBodyDeclarationTrail {return ";" + classBodyDeclarationTrail.get(0);}
    |   block classBodyDeclarationTrail {return block.get(0) + " " + classBodyDeclarationTrail.get(0);}
    |   modifiers memberDeclaration classBodyDeclarationTrail
            {return modifiers.get(0) + " " + memberDeclaration.get(0) + " " + classBodyDeclarationTrail.get(0);}
    |   memberDeclaration classBodyDeclarationTrail {return memberDeclaration.get(0) + " " + classBodyDeclarationTrail.get(0);};

classBodyDeclarationTrail -> String
    :   classBodyDeclaration {return classBodyDeclaration.get(0);}
    |   {return "";};

memberDeclaration -> String
    :   VOID methodDeclaration {return "void " + methodDeclaration.get(0);}
    |   type memberDeclarationTypeTrail {return type.get(0) + " " + memberDeclarationTypeTrail.get(0);};

memberDeclarationTypeTrail -> String
    :   localVariableDeclaration {return localVariableDeclaration.get(0);};

methodDeclaration -> String
    :   identifier LPAREN formalParameterList RPAREN methodBodyT
        {return identifier.get(0) + "(" + formalParameterList.get(0) + ")" + methodBodyT.get(0);};

formalParameterList -> String
    :   formalParameter formalParametersT {return formalParameter.get(0) + " " + formalParametersT.get(0);}
    |   {return "";};

formalParametersT -> String
    :   COMMA formalParameter formalParametersT {return ", " + formalParameter.get(0) + " " + formalParametersT.get(0);}
    |   {return "";};

formalParameter -> String
    :   type variableDeclaratorId {return type.get(0) + variableDeclaratorId.get(0);};

variableDeclaratorId -> String
    :   identifier arraysT {return identifier.get(0) + arraysT.get(0);};

methodBodyT -> String
    :   block {return block.get(0);}
    |   SEMICOLON {return ";";};

block -> String
    :   LBRACE blockStatementsRec RBRACE {return "{" + blockStatementsRec.get(0) + "}";};

blockStatementsRec -> String
    :   blockStatement blockStatementsRec {return blockStatement.get(0) + "\n" + blockStatementsRec.get(0);}
    |   {return "";};

blockStatement -> String
    :   modifiers varOrTypeDeclaration {return modifiers.get(0) + " " + varOrTypeDeclaration.get(0);}
    |   statement {return statement.get(0);};

varOrTypeDeclaration -> String
    :   localVariableDeclaration {return localVariableDeclaration.get(0);}
    |   typeDeclaration {return typeDeclaration.get(0);};

localVariableDeclaration -> String
    :   identifier localVariableInitT SEMICOLON
        {return identifier.get(0) + localVariableInitT.get(0) + ";";};

localVariableInitT -> String
    :   ASSIGN expression {return " = " + expression.get(0);}
    |   {return "";};

typeDeclaration -> String
    :   classDeclaration {return classDeclaration.get(0);}
    |   SEMICOLON {return ";";};

statement -> String
    :   block {return block.get(0);}
    |   IF parExpression statement elseT {return "if" + parExpression.get(0) + " " + statement.get(0) + elseT.get(0);}
    |   RETURN expressionT SEMICOLON {return "return" + expressionT.get(0) + ";";}
    |   THROW expression SEMICOLON {return "throw" + expression.get(0) + ";";}
    |   BREAK identifier SEMICOLON {return "break" + identifier.get(0) + ";";}
    |   SEMICOLON {return ";";}
    |   statementExpression SEMICOLON {return statementExpression.get(0) + ";";};

statementExpression -> String
    :   expression {return expression.get(0);}
    ;

parExpression -> String
    :   LPAREN expression RPAREN {return "(" + expression.get(0) + ")";};

elseT -> String
    :   statement {return statement.get(0);}
    |   {return "";};

expressionT -> String
    :   expression {return expression.get(0);}
    |   {return "";};

expression -> String
    :   primary expressionPrime {return primary.get(0) + " " + expressionPrime.get(0);}
    |   NEW creator expressionPrime {return "new " + creator.get(0) + " " + expressionPrime.get(0);}
    |   LPAREN type RPAREN expression expressionPrime
            {return "(" + type.get(0) + ")" + expression.get(0) + " " + expressionPrime.get(0);}
    |   mathop expression expressionPrime {return mathop.get(0) + " " + expression.get(0) + " " + expressionPrime.get(0);}
    ;

expressionPrime -> String
    :   DOT identifier expressionPrime {return "." + identifier.get(0) + " " + expressionPrime.get(0);}
    |   LBRACK expression RBRACK expressionPrime
            {return "[" + expression.get(0) + "] " + expressionPrime.get(0);}
    |   LPAREN expressionList RPAREN expressionPrime
            {return "(" + expressionList.get(0) + ") " + expressionPrime.get(0);}
    |   division expression expressionPrime
            {return division.get(0) + " " + expression.get(0) + " " + expressionPrime.get(0);}
    |   INSTANCEOF type expressionPrime
            {return "instanceof " + type.get(0) + " " + expressionPrime.get(0);}
    |   comp expression expressionPrime
            {return comp.get(0) + expression.get(0) + " " + expressionPrime.get(0);}
    |   CARET expression expressionPrime
            {return CARET.get(0) + expression.get(0) + " " + expressionPrime.get(0);}
    |   AND expression expressionPrime
            {return AND.get(0) + expression.get(0) + " " + expressionPrime.get(0);}
    |   OR expression expressionPrime
            {return OR.get(0) + expression.get(0) + " " + expressionPrime.get(0);}
    |   QUESTION expression COLON expression expressionPrime
            {return "?" + expression.get(0) + ": " + expression.get(1) + " " + expressionPrime.get(0);}
    |   {return "";};

mathop -> String
    : ADD {return "+";}
    | SUB {return "-";};

division -> String
    : MUL {return "*";}
    | DIV {return "/";}
    | MOD {return "%";};
comp -> String
    : LE {return "<=";}
    | GE {return ">=";}
    | GT {return ">";}
    | LT {return "<";}
    | EQUAL {return "=";}
    | NOTEQUAL {return "!=";};

creator -> String
    :   createdName classCreatorRest {return createdName.get(0) + " " + classCreatorRest.get(0);}
    ;

createdName -> String
    :   identifier {return identifier.get(0);}
    |   primitiveType {return primitiveType.get(0);}
    ;

classCreatorRest -> String
    :   arguments classBodyT {return arguments.get(0) + " " + classBodyT.get(0);}
    ;

classBodyT -> String
    : classBody {return classBody.get(0);}
    | {return "";};

primary -> String
    :   THIS {return "this";}
    |   SUPER {return "super";}
    |   literal {return literal.get(0);}
    |   identifier {return identifier.get(0);};

arguments -> String
    :   LPAREN expressionList RPAREN {return "(" + expressionList.get(0) + ")";}
    |   {return "";};

expressionList -> String
    :   expression COMMA expressionList {return expression.get(0) + ", " + expressionList.get(0);}
    |   {return "";}
    ;


literal -> String
    :   numericLiteral {return numericLiteral.get(0);}
    |   characterLiteral {return characterLiteral.get(0);}
    |   stringLiteral {return stringLiteral.get(0);}
    |   booleanLiteral {return booleanLiteral.get(0);}
    |   NULL {return "null";};


LPAREN          : '(';
RPAREN          : ')';
LBRACE          : '{';
RBRACE          : '}';
LBRACK          : '[';
RBRACK          : ']';
SEMI            : ';';
COMMA           : ',';
DOT             : '.';
SEMICOLON       : ';';

ABSTRACT      : 'abstract';
ASSERT        : 'assert';
BOOLEAN       : 'boolean';
BREAK         : 'break';
BYTE          : 'byte';
CASE          : 'case';
CATCH         : 'catch';
CHAR          : 'char';
CLASS         : 'class';
CONST         : 'const';
CONTINUE      : 'continue';
DEFAULT       : 'default';
DO            : 'do';
DOUBLE        : 'double';
ELSE          : 'else';
ENUM          : 'enum';
EXTENDS       : 'extends';
FINAL         : 'final';
FINALLY       : 'finally';
FLOAT         : 'float';
FOR           : 'for';
IF            : 'if';
GOTO          : 'goto';
IMPLEMENTS    : 'implements';
IMPORT        : 'import';
INSTANCEOF    : 'instanceof';
INT           : 'int';
INTERFACE     : 'interface';
LONG          : 'long';
NATIVE        : 'native';
NEW           : 'new';
PACKAGE       : 'package';
PRIVATE       : 'private';
PROTECTED     : 'protected';
PUBLIC        : 'public';
RETURN        : 'return';
SHORT         : 'short';
STATIC        : 'static';
STRICTFP      : 'strictfp';
SUPER         : 'super';
SWITCH        : 'switch';
SYNCHRONIZED  : 'synchronized';
THIS          : 'this';
THROW         : 'throw';
THROWS        : 'throws';
TRANSIENT     : 'transient';
TRY           : 'try';
VOID          : 'void';
VOLATILE      : 'volatile';
WHILE         : 'while';

ASSIGN          : '=';
GT              : '>';
LT              : '<';
BANG            : '!';
TILDE           : '~';
QUESTION        : '?';
COLON           : ':';
EQUAL           : '==';
LE              : '<=';
GE              : '>=';
NOTEQUAL        : '!=';
AND             : '&&';
OR              : '||';
ADD             : '+';
SUB             : '-';
MUL             : '*';
DIV             : '/';
CARET           : '^';
MOD             : '%';

ADD_ASSIGN      : '+=';
SUB_ASSIGN      : '-=';
MUL_ASSIGN      : '*=';
DIV_ASSIGN      : '/=';
AND_ASSIGN      : '&=';
OR_ASSIGN       : '|=';
XOR_ASSIGN      : '^=';
MOD_ASSIGN      : '%=';

ZERO : '0';
DIGIT :  '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9';
NONZERODIGIT :  '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9';

numericLiteral -> String
    :   ZERO zeroNumericTrail {return "0" + zeroNumericTrail.get(0);}
    |   NONZERODIGIT nonzeroNumericTrail {return NONZERODIGIT.get(0) + nonzeroNumericTrail.get(0);};

zeroNumericTrail -> String
    :   DOT oneOrMoreDigits {return "." + oneOrMoreDigits.get(0);}
    |   {return "";};

nonzeroNumericTrail -> String
    :   ZERO nonzeroNumericTrail {return "0" + nonzeroNumericTrail.get(0);}
    |   NONZERODIGIT nonzeroNumericTrail {return NONZERODIGIT.get(0) + nonzeroNumericTrail.get(0);}
    |   zeroNumericTrail {return zeroNumericTrail.get(0);};

digits -> String
    :   ZERO digits {return "0" + digits.get(0);}
    |   NONZERODIGIT digits {return NONZERODIGIT.get(0) + digits.get(0);}
    |   {return "";};

oneOrMoreDigits -> String
    :   ZERO digits {return "0" + digits.get(0);}
    |   NONZERODIGIT digits {return NONZERODIGIT.get(0) + digits.get(0);};

floatingPointLiteral -> String
    :   digits DOT oneOrMoreDigits {return digits.get(0) + "." + oneOrMoreDigits.get(0);}
    ;

booleanLiteral -> String
    :   TRUE {return "true";}
    |   FALSE {return "false";}
    ;

TRUE: 'true';
FALSE:'false';

SINGLEQUOTE: '\'';
DOUBLEQUOTE: '\"';

characterLiteral -> String
    : SINGLEQUOTE anyIdSymbol SINGLEQUOTE {return "\'" + anyIdSymbol.get(0) + "\'";};
stringLiteral -> String
    : DOUBLEQUOTE anyIdSymbols DOUBLEQUOTE {return "\"" + anyIdSymbols.get(0) + "\"";};

identifier -> String
    :   NONDIGITIDSYMBOL anyIdSymbols {return NONDIGITIDSYMBOL.get(0) + anyIdSymbols.get(0);}
    ;

NONDIGITIDSYMBOL:  'a' | 'b' | 'c' | 'd' | 'e' | 'f' |
                  'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' |
                  'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' |
                  'u' | 'v' | 'w' | 'x' | 'y' | 'z' |
                  'A' | 'B' | 'C' | 'D' | 'E' | 'F' |
                  'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' |
                  'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' |
                  'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | '$' | '_';
anyIdSymbol -> String
    : ZERO {return "0";}
    | NONZERODIGIT {return NONZERODIGIT.get(0);}
    | NONDIGITIDSYMBOL {return NONDIGITIDSYMBOL.get(0);};
anyIdSymbols -> String
    : anyIdSymbol anyIdSymbols {return anyIdSymbol.get(0) + anyIdSymbols.get(0);}
    | {return "";};
nonDigitIdSymbols -> String
    : NONDIGITIDSYMBOL nonDigitIdSymbolsTrail
        {return NONDIGITIDSYMBOL.get(0) + nonDigitIdSymbolsTrail.get(0);};
nonDigitIdSymbolsTrail -> String
    : NONDIGITIDSYMBOL nonDigitIdSymbolsTrail
        {return NONDIGITIDSYMBOL.get(0) + nonDigitIdSymbolsTrail.get(0);}
    | {return "";};

NULL: 'null';

AT : '@';
ELLIPSIS : '...';